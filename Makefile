.PHONY: clean clean_nox compile_translations coverage diff_cover docs \
        dummy_translations extract_translations fake_translations help \
        pii_check pull_translations quality requirements selfcheck \
        test test-all upgrade compile-requirements validate \
        install_transifex_client piptools dev_requirements test_requirements

.DEFAULT_GOAL := help

BROWSER := python -m webbrowser file://$(CURDIR)/

## General targets

help: ## Display this help message
	@echo "Usage: make <target>"
	@awk -F ':.*?## ' '/^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

clean: ## Remove generated bytecode, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.py[cod]' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	coverage erase
	rm -rf build/ dist/ *.egg-info htmlcov

clean_nox: ## Remove nox cache
	rm -rf .nox .pytest_cache

## Quality & Testing (via nox)

test: clean ## Run tests using nox
	nox -s tests

test-all: quality pii_check ## Run all nox sessions
	nox

coverage: clean ## Run coverage with HTML report
	nox -s coverage
	$(BROWSER)htmlcov/index.html

diff_cover: test ## Generate diff coverage report
	diff-cover coverage.xml

quality: ## Run code quality checks
	nox -s quality

pii_check: ## Run PII annotation checks
	nox -s pii_check

validate: quality pii_check test ## Run tests and quality checks

selfcheck: ## Confirm the Makefile is properly structured
	@echo "✅ Makefile is well-formed."

## Requirements

piptools: ## Install pip-tools
	pip install -r requirements/pip.txt
	pip install -r requirements/pip-tools.txt

requirements: clean_nox piptools ## Sync all dev requirements
	pip-sync -q requirements/dev.txt requirements/private.*

compile-requirements: ## Compile all requirements/*.txt files from *.in
	pip install -qr requirements/pip-tools.txt
	pip-compile --allow-unsafe --rebuild -o requirements/pip.txt requirements/pip.in
	pip-compile --rebuild -o requirements/pip-tools.txt requirements/pip-tools.in
	pip install -qr requirements/pip.txt
	pip install -qr requirements/pip-tools.txt
	pip-compile -o requirements/base.txt requirements/base.in
	pip-compile -o requirements/test.txt requirements/test.in
	pip-compile -o requirements/doc.txt requirements/doc.in
	pip-compile -o requirements/quality.txt requirements/quality.in
	pip-compile -o requirements/ci.txt requirements/ci.in
	pip-compile -o requirements/dev.txt requirements/dev.in
	# Remove Django from test.txt to avoid conflicts if included in base
	sed '/^[dD]jango==/d' requirements/test.txt > requirements/test.tmp
	mv requirements/test.tmp requirements/test.txt

upgrade: ## Upgrade all requirements to latest allowed versions
	$(MAKE) compile-requirements COMPILE_OPTS="--upgrade"

dev_requirements: ## Install development requirements
	pip install -qr requirements/pip.txt
	pip install -r requirements/dev.txt

test_requirements: ## Install test requirements
	pip install -r requirements/test.txt

## Documentation

docs: ## Build and open documentation
	nox -s docs
	$(BROWSER)docs/_build/html/index.html

## Localization

extract_translations: ## Extract translatable strings
	rm -rf docs/_build
	cd openedx_pok_webhook && i18n_tool extract --no-segment

compile_translations: ## Compile translation .po to .mo
	cd openedx_pok_webhook && i18n_tool generate

dummy_translations: ## Create dummy .po files for testing
	cd openedx_pok_webhook && i18n_tool dummy

build_dummy_translations: extract_translations dummy_translations compile_translations ## Generate dummy translations

detect_changed_source_translations:
	cd openedx_pok_webhook && i18n_tool changed

pull_translations: ## Pull from Transifex
ifdef OPENEDX_ATLAS_PULL
	find openedx_pok_webhook/conf/locale -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;
	atlas pull $(OPENEDX_ATLAS_ARGS) translations/openedx-pok-webhook/openedx_pok_webhook/conf/locale:openedx_pok_webhook/conf/locale
	python manage.py compilemessages
	@echo "✅ Translations pulled and compiled using Atlas"
else
	tx pull -t -a -f --mode reviewed --minimum-perc=1
endif

validate_translations: build_dummy_translations detect_changed_source_translations ## Validate translation round-trip

install_transifex_client: ## Install Transifex CLI
	git diff -s --exit-code HEAD || { echo "❌ Please commit changes before installing."; exit 1; }
	curl -o- https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash
	git checkout -- LICENSE README.md
